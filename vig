#!/usr/bin/env python3

import os
import subprocess
import sys
import tempfile
import atexit
from datetime import datetime

def batchIter(items, size):
    for i in range(0, len(items), size):
        yield items[i : i + size]

def abort(message):
    sys.stderr.write(message + '\n')
    sys.exit(1)

status, cdup = subprocess.getstatusoutput("git rev-parse --show-cdup")
if status != 0:
    print(cdup, file=sys.stderr)
    exit(1)

if cdup:
    os.chdir(cdup)

lines = subprocess.check_output(
    ['git', 'status', '--porcelain'],
    text=True
).splitlines()

untracked_prefixes = ["??"]
tracked_prefixes = [" M", " D", " R"]

untracked = list(map(lambda l: l[1:], filter(lambda l: any(l.startswith(p) for p in untracked_prefixes), lines)))
tracked = list(map(lambda l: l[1:], filter(lambda l: any(l.startswith(p) for p in tracked_prefixes), lines)))

if tracked or untracked:
    temp = tempfile.mktemp()
    atexit.register(lambda: os.path.exists(temp) and os.remove(temp))

    editor = os.getenv("EDITOR", "vi")

    with open(temp, "w") as f:
        if tracked:
            f.write("\n".join(tracked) + "\n")
            if untracked:
                f.write("\n")
        if untracked:
            f.write("\n".join(untracked) + "\n")

    items = [*tracked, *untracked]

    start = datetime.fromtimestamp(os.path.getmtime(temp))
    subprocess.run([editor, temp])
    end = datetime.fromtimestamp(os.path.getmtime(temp))

    if start == end:
        print("aborted")
        exit(0)

    with open(temp, "r") as f:
        lines = list(filter(bool, f.read().split("\n")))

    if len(lines) > len(items):
        abort("new files added")

    selected = []
    i = 0
    for file in lines:
        while True:
            if i >= len(items):
                abort("order changed")
            i += 1
            if items[i - 1] == file:
                selected.append(file)
                break

    selected = list(map(lambda l: l[2:], selected))

    for batch in batchIter(selected, 128):
        subprocess.run(['git', 'add', *batch])

    subprocess.run(['git', 'status'])
